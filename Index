<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Start Vitals</title>

  <!-- PWA Manifest -->
  <link rel="manifest" href="manifest.json">

  <!-- Theme Color -->
  <meta name="theme-color" content="#3498db">

  <!-- Register Service Worker -->
  <script>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('sw.js');
      });
    }
  </script>

  <style>
    :root {
      --primary-bg: #f4f7f9;
      --secondary-bg: #ffffff;
      --border-color: #dbe2e8;
      --text-color: #2c3e50;
      --primary-accent: #3498db;
      --secondary-accent: #2ecc71;
      --danger-accent: #e74c3c;
      --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    body {
      font-family: var(--font-family);
      background-color: var(--primary-bg);
      color: var(--text-color);
      margin: 0;
      padding: 10px;
      font-size: 16px;
      min-height: 100vh;
      position: relative;
    }

    /* === Background & Logo === */
    .app-background {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle at center, rgba(52,152,219,0.15) 0%, rgba(236,240,241,0.9) 100%);
      z-index: -2;
      overflow: hidden;
    }

    .app-logo {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 120px;
      height: 120px;
      opacity: 0.08;
      z-index: -1;
    }

    /* === Container === */
    .container {
      max-width: 800px;
      margin: 0 auto;
      background-color: var(--secondary-bg);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      overflow: hidden;
    }

    /* === Tabs === */
    .tab-nav {
      display: flex;
      background-color: #ecf0f1;
      border-bottom: 1px solid var(--border-color);
      overflow-x: auto;
    }

    .tab-button {
      padding: 15px 20px;
      border: none;
      background-color: transparent;
      cursor: pointer;
      font-size: 1em;
      font-weight: 500;
      color: var(--text-color);
      transition: background-color 0.3s, color 0.3s;
      white-space: nowrap;
    }

    .tab-button.active {
      background-color: var(--primary-accent);
      color: white;
      border-bottom: 3px solid var(--secondary-accent);
    }

    .tab-content {
      display: none;
      padding: 20px;
      animation: fadeIn 0.5s;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    .tab-content.active {
      display: block;
    }

    /* === Form Elements === */
    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      font-weight: 600;
      margin-bottom: 8px;
    }

    .form-group input, .form-group textarea, .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 1em;
    }

    .form-group textarea {
      min-height: 100px;
      resize: vertical;
    }

    .input-group {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .input-group input {
      flex: 1;
    }

    .input-group-addon {
      background-color: #ecf0f1;
      padding: 10px;
      border: 1px solid var(--border-color);
      border-radius: 4px;
    }

    /* === GCS Section === */
    .gcs-section {
      margin-bottom: 20px;
      border: 1px solid var(--border-color);
      border-radius: 5px;
      padding: 15px;
    }

    .gcs-section h3 {
      margin-top: 0;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 10px;
      font-size: 1.1em;
    }

    .gcs-option {
      display: block;
      margin-bottom: 10px;
    }

    #gcs-total {
      font-size: 1.5em;
      font-weight: bold;
      text-align: center;
      padding: 15px;
      background-color: var(--primary-accent);
      color: white;
      border-radius: 5px;
      margin-top: 20px;
    }

    /* === Buttons === */
    .btn {
      padding: 12px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1em;
      font-weight: bold;
      transition: background-color 0.3s;
    }

    .btn-primary {
      background-color: var(--secondary-accent);
      color: white;
    }

    .btn-primary:hover {
      background-color: #27ae60;
    }

    .btn-secondary {
      background-color: #bdc3c7;
      color: var(--text-color);
    }

    .btn-secondary:hover {
      background-color: #95a5a6;
    }

    #results-output {
      white-space: pre-wrap;
      background-color: #ecf0f1;
      border: 1px solid var(--border-color);
      padding: 15px;
      border-radius: 5px;
      min-height: 200px;
      font-family: "Courier New", Courier, monospace;
    }
  </style>
</head>
<body>

  <div class="app-background"></div>
  <img src="icon-512.png" class="app-logo" alt="Start Vitals Logo">

  <div class="container">
    <div class="tab-nav">
      <button class="tab-button active" onclick="openTab(event, 'patient-info')">Patient Info</button>
      <button class="tab-button" onclick="openTab(event, 'vitals')">Vitals</button>
      <button class="tab-button" onclick="openTab(event, 'gcs')">GCS</button>
      <button class="tab-button" onclick="openTab(event, 'notes')">Notes</button>
      <button class="tab-button" onclick="openTab(event, 'results')">Results</button>
    </div>

    <!-- === PATIENT INFO === -->
    <div id="patient-info" class="tab-content active">
      <h2>Patient Information</h2>
      <div class="form-group"><label>Allergies</label><input id="allergies" placeholder="e.g., Penicillin, Peanuts"></div>
      <div class="form-group"><label>Medication</label><input id="medication" placeholder="e.g., Metformin, Lisinopril"></div>
      <div class="form-group"><label>Past History</label><input id="history" placeholder="e.g., Diabetes, Hypertension"></div>
      <div class="form-group"><label>Last Intake (Food/Drink)</label><input id="last-intake" placeholder="e.g., Water at 10:00 AM"></div>
    </div>

    <!-- === VITALS === -->
    <div id="vitals" class="tab-content">
      <h2>Vitals</h2>
      <div class="form-group">
        <label>Blood Pressure (BP)</label>
        <div class="input-group"><input type="number" id="bp-sys" placeholder="Systolic"><span>/</span><input type="number" id="bp-dia" placeholder="Diastolic"><span class="input-group-addon">mmHg</span></div>
      </div>
      <div class="form-group">
        <label>Pulse</label>
        <div class="input-group"><input type="number" id="pulse" placeholder="e.g., 80"><span class="input-group-addon">bpm</span></div>
      </div>
      <div class="form-group">
        <label>SPO₂</label>
        <div class="input-group"><input type="number" id="spo2" placeholder="e.g., 98"><span class="input-group-addon">%</span><input type="checkbox" id="on-ra"><label for="on-ra">On Room Air</label></div>
      </div>
      <div class="form-group">
        <label>Respiratory Rate</label>
        <div class="input-group"><input type="number" id="rrate" placeholder="e.g., 16"><span class="input-group-addon">/min</span></div>
      </div>
      <div class="form-group">
        <label>Blood Glucose (HGT)</label>
        <div class="input-group"><input type="number" id="hgt" placeholder="e.g., 5.5" step="0.1"><span class="input-group-addon">mmol/L</span></div>
      </div>
      <div class="form-group">
        <label>Temperature</label>
        <div class="input-group"><input type="number" id="temp" placeholder="e.g., 36.8" step="0.1"><span class="input-group-addon">°C</span></div>
      </div>
      <div class="form-group">
        <label>Capillary Refill</label>
        <div class="input-group"><input type="number" id="cap-refill" placeholder="e.g., 2"><span class="input-group-addon">s</span></div>
      </div>
      <div class="form-group">
        <label>Pupils</label>
        <div class="input-group"><input type="number" id="pupils" placeholder="e.g., 3"><span class="input-group-addon">mm</span></div>
      </div>
      <div class="form-group">
        <label>Pain Score</label>
        <div class="input-group"><input type="number" id="pain" placeholder="e.g., 7" min="0" max="10"><span class="input-group-addon">/10</span></div>
      </div>
    </div>

    <!-- === GCS === -->
    <div id="gcs" class="tab-content">
      <h2>Glasgow Coma Scale (GCS)</h2>
      <div class="gcs-section">
        <h3>Eye Opening Response</h3>
        <label class="gcs-option"><input type="radio" name="gcs-eye" value="4"> Spontaneous (4)</label>
        <label class="gcs-option"><input type="radio" name="gcs-eye" value="3"> To Speech (3)</label>
        <label class="gcs-option"><input type="radio" name="gcs-eye" value="2"> To Pain (2)</label>
        <label class="gcs-option"><input type="radio" name="gcs-eye" value="1"> No Response (1)</label>
      </div>
      <div class="gcs-section">
        <h3>Verbal Response</h3>
        <label class="gcs-option"><input type="radio" name="gcs-verbal" value="5"> Oriented (5)</label>
        <label class="gcs-option"><input type="radio" name="gcs-verbal" value="4"> Confused (4)</label>
        <label class="gcs-option"><input type="radio" name="gcs-verbal" value="3"> Inappropriate Words (3)</label>
        <label class="gcs-option"><input type="radio" name="gcs-verbal" value="2"> Incomprehensible Sounds (2)</label>
        <label class="gcs-option"><input type="radio" name="gcs-verbal" value="1"> No Response (1)</label>
      </div>
      <div class="gcs-section">
        <h3>Motor Response</h3>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="6"> Obeys Commands (6)</label>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="5"> Localizes to Pain (5)</label>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="4"> Withdraws from Pain (4)</label>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="3"> Flexion to Pain (3)</label>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="2"> Extension to Pain (2)</label>
        <label class="gcs-option"><input type="radio" name="gcs-motor" value="1"> No Response (1)</label>
      </div>
      <div id="gcs-total">Total GCS Score: 0 / 15</div>
    </div>

    <!-- === NOTES === -->
    <div id="notes" class="tab-content">
      <h2>Signs/Symptoms & Notes</h2>
      <div class="form-group"><label>Signs / Symptoms</label><textarea id="signs-symptoms" placeholder="Describe patient's signs and symptoms..."></textarea></div>
      <div class="form-group"><label>Additional Notes</label><textarea id="general-notes" placeholder="Any other relevant information..."></textarea></div>
    </div>

    <!-- === RESULTS === -->
    <div id="results" class="tab-content">
      <h2>Consolidated Results</h2>
      <div class="form-group"><button class="btn btn-primary" onclick="generateResults()">Generate Handover Report</button></div>
      <div class="form-group"><label>Copy the text below:</label><textarea id="results-output" readonly></textarea></div>
      <div class="form-group"><button class="btn btn-secondary" onclick="copyResults()">Copy to Clipboard</button></div>
    </div>
  </div>

  <script>
    // === Tab switching ===
    function openTab(evt, tabName) {
      let tabcontent = document.getElementsByClassName("tab-content");
      for (let i = 0; i < tabcontent.length; i++) tabcontent[i].style.display = "none";
      let tabbuttons = document.getElementsByClassName("tab-button");
      for (let i = 0; i < tabbuttons.length; i++) tabbuttons[i].className = tabbuttons[i].className.replace(" active", "");
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.className += " active";
    }

    // === GCS Calculation ===
    const gcsInputs = document.querySelectorAll('input[name="gcs-eye"], input[name="gcs-verbal"], input[name="gcs-motor"]');
    gcsInputs.forEach(input => input.addEventListener('change', calculateGCS));

    function calculateGCS() {
      const e = parseInt(document.querySelector('input[name="gcs-eye"]:checked')?.value || 0);
      const v = parseInt(document.querySelector('input[name="gcs-verbal"]:checked')?.value || 0);
      const m = parseInt(document.querySelector('input[name="gcs-motor"]:checked')?.value || 0);
      const total = e + v + m;
      document.getElementById('gcs-total').innerText = `Total GCS Score: ${total} / 15 (E${e} V${v} M${m})`;
    }

    // === Generate Results ===
    function generateResults() {
      let report = "--- START VITALS REPORT ---\n\n";
      const addLine = (label, val, unit = "") => { if (val && val.trim() !== "") report += `${label.padEnd(15)}: ${val}${unit}\n`; };

      addLine("Allergies", document.getElementById('allergies').value);
      addLine("Medication", document.getElementById('medication').value);
      addLine("Past History", document.getElementById('history').value);
      addLine("Last Intake", document.getElementById('last-intake').value);
      report += "\n--- VITALS ---\n\n";

      const bpSys = document.getElementById('bp-sys').value, bpDia = document.getElementById('bp-dia').value;
      if (bpSys && bpDia) report += `BP             : ${bpSys}/${bpDia} mmHg\n`;
      addLine("Pulse", document.getElementById('pulse').value, " bpm");

      const spo2 = document.getElementById('spo2').value;
      const onRa = document.getElementById('on-ra').checked;
      if (spo2) report += `SPO2           : ${spo2}% ${onRa ? '(Room Air)' : ''}\n`;

      addLine("Resp Rate", document.getElementById('rrate').value, "/min");
      addLine("Blood Glucose", document.getElementById('hgt').value, " mmol/L");
      addLine("Temperature", document.getElementById('temp').value, " °C");
      addLine("Cap Refill", document.getElementById('cap-refill').value, " s

{
  "name": "Start Vitals",
  "short_name": "Start Vitals",
  "description": "Offline vitals log for first responders",
  "start_url": "index.html",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#3498db",
  "icons": [
    {
      "src": "icon-192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "icon-512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}

const CACHE_NAME = 'fr-log-v1';
const urlsToCache = [
  'index.html',
  'manifest.json',
  'icon-192.png',
  'icon-512.png'
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME).then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request).then(response => response || fetch(event.request))
  );
});
